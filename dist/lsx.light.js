"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v4.25.3
// source: lsx.light.proto
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.SetLightMode_Response = exports.SetLightMode_Request = exports.SetLightMode = exports.GetLightMode_Request = exports.GetLightMode_Response = exports.GetLightMode = exports.SetLightLockState_Response = exports.SetLightLockState_Request = exports.SetLightLockState = exports.GetLightLockState_Request = exports.GetLightLockState_Response = exports.GetLightLockState = exports.SetLightDmxState_Response = exports.SetLightDmxState_Request = exports.SetLightDmxState = exports.GetLightDmxState_Request = exports.GetLightDmxState_Response = exports.GetLightDmxState = exports.SetLightSwitchState_Response = exports.SetLightSwitchState_Request = exports.SetLightSwitchState = exports.GetLightSwitchState_Request = exports.GetLightSwitchState_Response = exports.GetLightSwitchState = exports.SetLightPowerState_Response = exports.SetLightPowerState_Request = exports.SetLightPowerState = exports.GetLightPowerState_Request = exports.GetLightPowerState_Response = exports.GetLightPowerState = exports.LightId = exports.LightMode = exports.LightDMXState = exports.LightSwitchState = void 0;
exports.lightSwitchStateFromJSON = lightSwitchStateFromJSON;
exports.lightSwitchStateToJSON = lightSwitchStateToJSON;
exports.lightDMXStateFromJSON = lightDMXStateFromJSON;
exports.lightDMXStateToJSON = lightDMXStateToJSON;
exports.lightModeFromJSON = lightModeFromJSON;
exports.lightModeToJSON = lightModeToJSON;
exports.lightIdFromJSON = lightIdFromJSON;
exports.lightIdToJSON = lightIdToJSON;
/* eslint-disable */
const _m0 = __importStar(require("protobufjs/minimal"));
const lsx_common_1 = require("./lsx.common");
const lsx_power_1 = require("./lsx.power");
var LightSwitchState;
(function (LightSwitchState) {
    LightSwitchState[LightSwitchState["SWITCH_STATE_OFF"] = 0] = "SWITCH_STATE_OFF";
    LightSwitchState[LightSwitchState["SWITCH_STATE_ON"] = 1] = "SWITCH_STATE_ON";
    LightSwitchState[LightSwitchState["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LightSwitchState || (exports.LightSwitchState = LightSwitchState = {}));
function lightSwitchStateFromJSON(object) {
    switch (object) {
        case 0:
        case "SWITCH_STATE_OFF":
            return LightSwitchState.SWITCH_STATE_OFF;
        case 1:
        case "SWITCH_STATE_ON":
            return LightSwitchState.SWITCH_STATE_ON;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LightSwitchState.UNRECOGNIZED;
    }
}
function lightSwitchStateToJSON(object) {
    switch (object) {
        case LightSwitchState.SWITCH_STATE_OFF:
            return "SWITCH_STATE_OFF";
        case LightSwitchState.SWITCH_STATE_ON:
            return "SWITCH_STATE_ON";
        case LightSwitchState.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var LightDMXState;
(function (LightDMXState) {
    LightDMXState[LightDMXState["DMX_STATE_EMPTY"] = 0] = "DMX_STATE_EMPTY";
    LightDMXState[LightDMXState["DMX_STATE_OFF"] = 1] = "DMX_STATE_OFF";
    LightDMXState[LightDMXState["DMX_STATE_WHITE"] = 2] = "DMX_STATE_WHITE";
    LightDMXState[LightDMXState["DMX_STATE_RED"] = 3] = "DMX_STATE_RED";
    LightDMXState[LightDMXState["DMX_STATE_FLICKER"] = 4] = "DMX_STATE_FLICKER";
    LightDMXState[LightDMXState["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LightDMXState || (exports.LightDMXState = LightDMXState = {}));
function lightDMXStateFromJSON(object) {
    switch (object) {
        case 0:
        case "DMX_STATE_EMPTY":
            return LightDMXState.DMX_STATE_EMPTY;
        case 1:
        case "DMX_STATE_OFF":
            return LightDMXState.DMX_STATE_OFF;
        case 2:
        case "DMX_STATE_WHITE":
            return LightDMXState.DMX_STATE_WHITE;
        case 3:
        case "DMX_STATE_RED":
            return LightDMXState.DMX_STATE_RED;
        case 4:
        case "DMX_STATE_FLICKER":
            return LightDMXState.DMX_STATE_FLICKER;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LightDMXState.UNRECOGNIZED;
    }
}
function lightDMXStateToJSON(object) {
    switch (object) {
        case LightDMXState.DMX_STATE_EMPTY:
            return "DMX_STATE_EMPTY";
        case LightDMXState.DMX_STATE_OFF:
            return "DMX_STATE_OFF";
        case LightDMXState.DMX_STATE_WHITE:
            return "DMX_STATE_WHITE";
        case LightDMXState.DMX_STATE_RED:
            return "DMX_STATE_RED";
        case LightDMXState.DMX_STATE_FLICKER:
            return "DMX_STATE_FLICKER";
        case LightDMXState.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var LightMode;
(function (LightMode) {
    LightMode[LightMode["LIGHT_MODE_EMPTY"] = 0] = "LIGHT_MODE_EMPTY";
    LightMode[LightMode["LIGHT_MODE_WHITE"] = 1] = "LIGHT_MODE_WHITE";
    LightMode[LightMode["LIGHT_MODE_RED"] = 2] = "LIGHT_MODE_RED";
    LightMode[LightMode["LIGHT_MODE_BLACKOUT"] = 3] = "LIGHT_MODE_BLACKOUT";
    LightMode[LightMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LightMode || (exports.LightMode = LightMode = {}));
function lightModeFromJSON(object) {
    switch (object) {
        case 0:
        case "LIGHT_MODE_EMPTY":
            return LightMode.LIGHT_MODE_EMPTY;
        case 1:
        case "LIGHT_MODE_WHITE":
            return LightMode.LIGHT_MODE_WHITE;
        case 2:
        case "LIGHT_MODE_RED":
            return LightMode.LIGHT_MODE_RED;
        case 3:
        case "LIGHT_MODE_BLACKOUT":
            return LightMode.LIGHT_MODE_BLACKOUT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LightMode.UNRECOGNIZED;
    }
}
function lightModeToJSON(object) {
    switch (object) {
        case LightMode.LIGHT_MODE_EMPTY:
            return "LIGHT_MODE_EMPTY";
        case LightMode.LIGHT_MODE_WHITE:
            return "LIGHT_MODE_WHITE";
        case LightMode.LIGHT_MODE_RED:
            return "LIGHT_MODE_RED";
        case LightMode.LIGHT_MODE_BLACKOUT:
            return "LIGHT_MODE_BLACKOUT";
        case LightMode.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
var LightId;
(function (LightId) {
    LightId[LightId["LIGHT_EMPTY"] = 0] = "LIGHT_EMPTY";
    LightId[LightId["LIGHT_OG_BASE_MED"] = 1] = "LIGHT_OG_BASE_MED";
    LightId[LightId["LIGHT_OG_BASE_ADM"] = 2] = "LIGHT_OG_BASE_ADM";
    LightId[LightId["LIGHT_OG_BASE_CIC"] = 3] = "LIGHT_OG_BASE_CIC";
    LightId[LightId["LIGHT_OG_BASE_SCI"] = 4] = "LIGHT_OG_BASE_SCI";
    LightId[LightId["LIGHT_OG_BASE_TEC"] = 5] = "LIGHT_OG_BASE_TEC";
    LightId[LightId["LIGHT_OG_BASE_HC"] = 7] = "LIGHT_OG_BASE_HC";
    LightId[LightId["LIGHT_OG_HALL"] = 8] = "LIGHT_OG_HALL";
    LightId[LightId["LIGHT_OG_COURTYARD"] = 9] = "LIGHT_OG_COURTYARD";
    LightId[LightId["LIGHT_OG_MESSHALL"] = 10] = "LIGHT_OG_MESSHALL";
    LightId[LightId["LIGHT_OG_GATE"] = 11] = "LIGHT_OG_GATE";
    LightId[LightId["LIGHT_OG_PARCELS"] = 12] = "LIGHT_OG_PARCELS";
    LightId[LightId["LIGHT_UG_RWALL"] = 13] = "LIGHT_UG_RWALL";
    /** LIGHT_UG_HALL - LIGHT_UG_PARCELS_RIGHT = 14; */
    LightId[LightId["LIGHT_UG_HALL"] = 15] = "LIGHT_UG_HALL";
    LightId[LightId["LIGHT_OG_LOG"] = 16] = "LIGHT_OG_LOG";
    LightId[LightId["LIGHT_OG_BASE_FC"] = 17] = "LIGHT_OG_BASE_FC";
    LightId[LightId["LIGHT_UG_BASE_SEC"] = 18] = "LIGHT_UG_BASE_SEC";
    LightId[LightId["LIGHT_TUNNEL"] = 19] = "LIGHT_TUNNEL";
    LightId[LightId["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LightId || (exports.LightId = LightId = {}));
function lightIdFromJSON(object) {
    switch (object) {
        case 0:
        case "LIGHT_EMPTY":
            return LightId.LIGHT_EMPTY;
        case 1:
        case "LIGHT_OG_BASE_MED":
            return LightId.LIGHT_OG_BASE_MED;
        case 2:
        case "LIGHT_OG_BASE_ADM":
            return LightId.LIGHT_OG_BASE_ADM;
        case 3:
        case "LIGHT_OG_BASE_CIC":
            return LightId.LIGHT_OG_BASE_CIC;
        case 4:
        case "LIGHT_OG_BASE_SCI":
            return LightId.LIGHT_OG_BASE_SCI;
        case 5:
        case "LIGHT_OG_BASE_TEC":
            return LightId.LIGHT_OG_BASE_TEC;
        case 7:
        case "LIGHT_OG_BASE_HC":
            return LightId.LIGHT_OG_BASE_HC;
        case 8:
        case "LIGHT_OG_HALL":
            return LightId.LIGHT_OG_HALL;
        case 9:
        case "LIGHT_OG_COURTYARD":
            return LightId.LIGHT_OG_COURTYARD;
        case 10:
        case "LIGHT_OG_MESSHALL":
            return LightId.LIGHT_OG_MESSHALL;
        case 11:
        case "LIGHT_OG_GATE":
            return LightId.LIGHT_OG_GATE;
        case 12:
        case "LIGHT_OG_PARCELS":
            return LightId.LIGHT_OG_PARCELS;
        case 13:
        case "LIGHT_UG_RWALL":
            return LightId.LIGHT_UG_RWALL;
        case 15:
        case "LIGHT_UG_HALL":
            return LightId.LIGHT_UG_HALL;
        case 16:
        case "LIGHT_OG_LOG":
            return LightId.LIGHT_OG_LOG;
        case 17:
        case "LIGHT_OG_BASE_FC":
            return LightId.LIGHT_OG_BASE_FC;
        case 18:
        case "LIGHT_UG_BASE_SEC":
            return LightId.LIGHT_UG_BASE_SEC;
        case 19:
        case "LIGHT_TUNNEL":
            return LightId.LIGHT_TUNNEL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LightId.UNRECOGNIZED;
    }
}
function lightIdToJSON(object) {
    switch (object) {
        case LightId.LIGHT_EMPTY:
            return "LIGHT_EMPTY";
        case LightId.LIGHT_OG_BASE_MED:
            return "LIGHT_OG_BASE_MED";
        case LightId.LIGHT_OG_BASE_ADM:
            return "LIGHT_OG_BASE_ADM";
        case LightId.LIGHT_OG_BASE_CIC:
            return "LIGHT_OG_BASE_CIC";
        case LightId.LIGHT_OG_BASE_SCI:
            return "LIGHT_OG_BASE_SCI";
        case LightId.LIGHT_OG_BASE_TEC:
            return "LIGHT_OG_BASE_TEC";
        case LightId.LIGHT_OG_BASE_HC:
            return "LIGHT_OG_BASE_HC";
        case LightId.LIGHT_OG_HALL:
            return "LIGHT_OG_HALL";
        case LightId.LIGHT_OG_COURTYARD:
            return "LIGHT_OG_COURTYARD";
        case LightId.LIGHT_OG_MESSHALL:
            return "LIGHT_OG_MESSHALL";
        case LightId.LIGHT_OG_GATE:
            return "LIGHT_OG_GATE";
        case LightId.LIGHT_OG_PARCELS:
            return "LIGHT_OG_PARCELS";
        case LightId.LIGHT_UG_RWALL:
            return "LIGHT_UG_RWALL";
        case LightId.LIGHT_UG_HALL:
            return "LIGHT_UG_HALL";
        case LightId.LIGHT_OG_LOG:
            return "LIGHT_OG_LOG";
        case LightId.LIGHT_OG_BASE_FC:
            return "LIGHT_OG_BASE_FC";
        case LightId.LIGHT_UG_BASE_SEC:
            return "LIGHT_UG_BASE_SEC";
        case LightId.LIGHT_TUNNEL:
            return "LIGHT_TUNNEL";
        case LightId.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseGetLightPowerState() {
    return { request: undefined, response: undefined, error: undefined };
}
exports.GetLightPowerState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.request !== undefined) {
            exports.GetLightPowerState_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
        }
        if (message.response !== undefined) {
            exports.GetLightPowerState_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
        }
        if (message.error !== undefined) {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightPowerState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.request = exports.GetLightPowerState_Request.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = exports.GetLightPowerState_Response.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            request: isSet(object.request) ? exports.GetLightPowerState_Request.fromJSON(object.request) : undefined,
            response: isSet(object.response) ? exports.GetLightPowerState_Response.fromJSON(object.response) : undefined,
            error: isSet(object.error) ? globalThis.String(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.request !== undefined) {
            obj.request = exports.GetLightPowerState_Request.toJSON(message.request);
        }
        if (message.response !== undefined) {
            obj.response = exports.GetLightPowerState_Response.toJSON(message.response);
        }
        if (message.error !== undefined) {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.GetLightPowerState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightPowerState();
        message.request = (object.request !== undefined && object.request !== null)
            ? exports.GetLightPowerState_Request.fromPartial(object.request)
            : undefined;
        message.response = (object.response !== undefined && object.response !== null)
            ? exports.GetLightPowerState_Response.fromPartial(object.response)
            : undefined;
        message.error = object.error ?? undefined;
        return message;
    },
};
function createBaseGetLightPowerState_Response() {
    return { state: 0 };
}
exports.GetLightPowerState_Response = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.state !== 0) {
            writer.uint32(8).int32(message.state);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightPowerState_Response();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { state: isSet(object.state) ? (0, lsx_power_1.powerStateFromJSON)(object.state) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.state !== 0) {
            obj.state = (0, lsx_power_1.powerStateToJSON)(message.state);
        }
        return obj;
    },
    create(base) {
        return exports.GetLightPowerState_Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightPowerState_Response();
        message.state = object.state ?? 0;
        return message;
    },
};
function createBaseGetLightPowerState_Request() {
    return { id: 0 };
}
exports.GetLightPowerState_Request = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightPowerState_Request();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? lightIdFromJSON(object.id) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = lightIdToJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.GetLightPowerState_Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightPowerState_Request();
        message.id = object.id ?? 0;
        return message;
    },
};
function createBaseSetLightPowerState() {
    return { request: undefined, response: undefined, error: undefined };
}
exports.SetLightPowerState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.request !== undefined) {
            exports.SetLightPowerState_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
        }
        if (message.response !== undefined) {
            exports.SetLightPowerState_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
        }
        if (message.error !== undefined) {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightPowerState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.request = exports.SetLightPowerState_Request.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = exports.SetLightPowerState_Response.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            request: isSet(object.request) ? exports.SetLightPowerState_Request.fromJSON(object.request) : undefined,
            response: isSet(object.response) ? exports.SetLightPowerState_Response.fromJSON(object.response) : undefined,
            error: isSet(object.error) ? globalThis.String(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.request !== undefined) {
            obj.request = exports.SetLightPowerState_Request.toJSON(message.request);
        }
        if (message.response !== undefined) {
            obj.response = exports.SetLightPowerState_Response.toJSON(message.response);
        }
        if (message.error !== undefined) {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.SetLightPowerState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetLightPowerState();
        message.request = (object.request !== undefined && object.request !== null)
            ? exports.SetLightPowerState_Request.fromPartial(object.request)
            : undefined;
        message.response = (object.response !== undefined && object.response !== null)
            ? exports.SetLightPowerState_Response.fromPartial(object.response)
            : undefined;
        message.error = object.error ?? undefined;
        return message;
    },
};
function createBaseSetLightPowerState_Request() {
    return { id: 0, state: 0 };
}
exports.SetLightPowerState_Request = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.state !== 0) {
            writer.uint32(16).int32(message.state);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightPowerState_Request();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? lightIdFromJSON(object.id) : 0,
            state: isSet(object.state) ? (0, lsx_power_1.powerStateFromJSON)(object.state) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = lightIdToJSON(message.id);
        }
        if (message.state !== 0) {
            obj.state = (0, lsx_power_1.powerStateToJSON)(message.state);
        }
        return obj;
    },
    create(base) {
        return exports.SetLightPowerState_Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetLightPowerState_Request();
        message.id = object.id ?? 0;
        message.state = object.state ?? 0;
        return message;
    },
};
function createBaseSetLightPowerState_Response() {
    return {};
}
exports.SetLightPowerState_Response = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightPowerState_Response();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.SetLightPowerState_Response.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseSetLightPowerState_Response();
        return message;
    },
};
function createBaseGetLightSwitchState() {
    return { request: undefined, response: undefined, error: undefined };
}
exports.GetLightSwitchState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.request !== undefined) {
            exports.GetLightSwitchState_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
        }
        if (message.response !== undefined) {
            exports.GetLightSwitchState_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
        }
        if (message.error !== undefined) {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightSwitchState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.request = exports.GetLightSwitchState_Request.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = exports.GetLightSwitchState_Response.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            request: isSet(object.request) ? exports.GetLightSwitchState_Request.fromJSON(object.request) : undefined,
            response: isSet(object.response) ? exports.GetLightSwitchState_Response.fromJSON(object.response) : undefined,
            error: isSet(object.error) ? globalThis.String(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.request !== undefined) {
            obj.request = exports.GetLightSwitchState_Request.toJSON(message.request);
        }
        if (message.response !== undefined) {
            obj.response = exports.GetLightSwitchState_Response.toJSON(message.response);
        }
        if (message.error !== undefined) {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.GetLightSwitchState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightSwitchState();
        message.request = (object.request !== undefined && object.request !== null)
            ? exports.GetLightSwitchState_Request.fromPartial(object.request)
            : undefined;
        message.response = (object.response !== undefined && object.response !== null)
            ? exports.GetLightSwitchState_Response.fromPartial(object.response)
            : undefined;
        message.error = object.error ?? undefined;
        return message;
    },
};
function createBaseGetLightSwitchState_Response() {
    return { state: 0 };
}
exports.GetLightSwitchState_Response = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.state !== 0) {
            writer.uint32(8).int32(message.state);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightSwitchState_Response();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { state: isSet(object.state) ? lightSwitchStateFromJSON(object.state) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.state !== 0) {
            obj.state = lightSwitchStateToJSON(message.state);
        }
        return obj;
    },
    create(base) {
        return exports.GetLightSwitchState_Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightSwitchState_Response();
        message.state = object.state ?? 0;
        return message;
    },
};
function createBaseGetLightSwitchState_Request() {
    return { id: 0 };
}
exports.GetLightSwitchState_Request = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightSwitchState_Request();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? lightIdFromJSON(object.id) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = lightIdToJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.GetLightSwitchState_Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightSwitchState_Request();
        message.id = object.id ?? 0;
        return message;
    },
};
function createBaseSetLightSwitchState() {
    return { request: undefined, response: undefined, error: undefined };
}
exports.SetLightSwitchState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.request !== undefined) {
            exports.SetLightSwitchState_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
        }
        if (message.response !== undefined) {
            exports.SetLightSwitchState_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
        }
        if (message.error !== undefined) {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightSwitchState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.request = exports.SetLightSwitchState_Request.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = exports.SetLightSwitchState_Response.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            request: isSet(object.request) ? exports.SetLightSwitchState_Request.fromJSON(object.request) : undefined,
            response: isSet(object.response) ? exports.SetLightSwitchState_Response.fromJSON(object.response) : undefined,
            error: isSet(object.error) ? globalThis.String(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.request !== undefined) {
            obj.request = exports.SetLightSwitchState_Request.toJSON(message.request);
        }
        if (message.response !== undefined) {
            obj.response = exports.SetLightSwitchState_Response.toJSON(message.response);
        }
        if (message.error !== undefined) {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.SetLightSwitchState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetLightSwitchState();
        message.request = (object.request !== undefined && object.request !== null)
            ? exports.SetLightSwitchState_Request.fromPartial(object.request)
            : undefined;
        message.response = (object.response !== undefined && object.response !== null)
            ? exports.SetLightSwitchState_Response.fromPartial(object.response)
            : undefined;
        message.error = object.error ?? undefined;
        return message;
    },
};
function createBaseSetLightSwitchState_Request() {
    return { id: 0, state: 0 };
}
exports.SetLightSwitchState_Request = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.state !== 0) {
            writer.uint32(16).int32(message.state);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightSwitchState_Request();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? lightIdFromJSON(object.id) : 0,
            state: isSet(object.state) ? lightSwitchStateFromJSON(object.state) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = lightIdToJSON(message.id);
        }
        if (message.state !== 0) {
            obj.state = lightSwitchStateToJSON(message.state);
        }
        return obj;
    },
    create(base) {
        return exports.SetLightSwitchState_Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetLightSwitchState_Request();
        message.id = object.id ?? 0;
        message.state = object.state ?? 0;
        return message;
    },
};
function createBaseSetLightSwitchState_Response() {
    return {};
}
exports.SetLightSwitchState_Response = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightSwitchState_Response();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.SetLightSwitchState_Response.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseSetLightSwitchState_Response();
        return message;
    },
};
function createBaseGetLightDmxState() {
    return { request: undefined, response: undefined, error: undefined };
}
exports.GetLightDmxState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.request !== undefined) {
            exports.GetLightDmxState_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
        }
        if (message.response !== undefined) {
            exports.GetLightDmxState_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
        }
        if (message.error !== undefined) {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightDmxState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.request = exports.GetLightDmxState_Request.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = exports.GetLightDmxState_Response.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            request: isSet(object.request) ? exports.GetLightDmxState_Request.fromJSON(object.request) : undefined,
            response: isSet(object.response) ? exports.GetLightDmxState_Response.fromJSON(object.response) : undefined,
            error: isSet(object.error) ? globalThis.String(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.request !== undefined) {
            obj.request = exports.GetLightDmxState_Request.toJSON(message.request);
        }
        if (message.response !== undefined) {
            obj.response = exports.GetLightDmxState_Response.toJSON(message.response);
        }
        if (message.error !== undefined) {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.GetLightDmxState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightDmxState();
        message.request = (object.request !== undefined && object.request !== null)
            ? exports.GetLightDmxState_Request.fromPartial(object.request)
            : undefined;
        message.response = (object.response !== undefined && object.response !== null)
            ? exports.GetLightDmxState_Response.fromPartial(object.response)
            : undefined;
        message.error = object.error ?? undefined;
        return message;
    },
};
function createBaseGetLightDmxState_Response() {
    return { state: 0 };
}
exports.GetLightDmxState_Response = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.state !== 0) {
            writer.uint32(8).int32(message.state);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightDmxState_Response();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { state: isSet(object.state) ? lightDMXStateFromJSON(object.state) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.state !== 0) {
            obj.state = lightDMXStateToJSON(message.state);
        }
        return obj;
    },
    create(base) {
        return exports.GetLightDmxState_Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightDmxState_Response();
        message.state = object.state ?? 0;
        return message;
    },
};
function createBaseGetLightDmxState_Request() {
    return { id: 0 };
}
exports.GetLightDmxState_Request = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightDmxState_Request();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? lightIdFromJSON(object.id) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = lightIdToJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.GetLightDmxState_Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightDmxState_Request();
        message.id = object.id ?? 0;
        return message;
    },
};
function createBaseSetLightDmxState() {
    return { request: undefined, response: undefined, error: undefined };
}
exports.SetLightDmxState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.request !== undefined) {
            exports.SetLightDmxState_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
        }
        if (message.response !== undefined) {
            exports.SetLightDmxState_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
        }
        if (message.error !== undefined) {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightDmxState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.request = exports.SetLightDmxState_Request.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = exports.SetLightDmxState_Response.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            request: isSet(object.request) ? exports.SetLightDmxState_Request.fromJSON(object.request) : undefined,
            response: isSet(object.response) ? exports.SetLightDmxState_Response.fromJSON(object.response) : undefined,
            error: isSet(object.error) ? globalThis.String(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.request !== undefined) {
            obj.request = exports.SetLightDmxState_Request.toJSON(message.request);
        }
        if (message.response !== undefined) {
            obj.response = exports.SetLightDmxState_Response.toJSON(message.response);
        }
        if (message.error !== undefined) {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.SetLightDmxState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetLightDmxState();
        message.request = (object.request !== undefined && object.request !== null)
            ? exports.SetLightDmxState_Request.fromPartial(object.request)
            : undefined;
        message.response = (object.response !== undefined && object.response !== null)
            ? exports.SetLightDmxState_Response.fromPartial(object.response)
            : undefined;
        message.error = object.error ?? undefined;
        return message;
    },
};
function createBaseSetLightDmxState_Request() {
    return { id: 0, state: 0 };
}
exports.SetLightDmxState_Request = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.state !== 0) {
            writer.uint32(16).int32(message.state);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightDmxState_Request();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? lightIdFromJSON(object.id) : 0,
            state: isSet(object.state) ? lightDMXStateFromJSON(object.state) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = lightIdToJSON(message.id);
        }
        if (message.state !== 0) {
            obj.state = lightDMXStateToJSON(message.state);
        }
        return obj;
    },
    create(base) {
        return exports.SetLightDmxState_Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetLightDmxState_Request();
        message.id = object.id ?? 0;
        message.state = object.state ?? 0;
        return message;
    },
};
function createBaseSetLightDmxState_Response() {
    return {};
}
exports.SetLightDmxState_Response = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightDmxState_Response();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.SetLightDmxState_Response.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseSetLightDmxState_Response();
        return message;
    },
};
function createBaseGetLightLockState() {
    return { request: undefined, response: undefined, error: undefined };
}
exports.GetLightLockState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.request !== undefined) {
            exports.GetLightLockState_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
        }
        if (message.response !== undefined) {
            exports.GetLightLockState_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
        }
        if (message.error !== undefined) {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightLockState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.request = exports.GetLightLockState_Request.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = exports.GetLightLockState_Response.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            request: isSet(object.request) ? exports.GetLightLockState_Request.fromJSON(object.request) : undefined,
            response: isSet(object.response) ? exports.GetLightLockState_Response.fromJSON(object.response) : undefined,
            error: isSet(object.error) ? globalThis.String(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.request !== undefined) {
            obj.request = exports.GetLightLockState_Request.toJSON(message.request);
        }
        if (message.response !== undefined) {
            obj.response = exports.GetLightLockState_Response.toJSON(message.response);
        }
        if (message.error !== undefined) {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.GetLightLockState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightLockState();
        message.request = (object.request !== undefined && object.request !== null)
            ? exports.GetLightLockState_Request.fromPartial(object.request)
            : undefined;
        message.response = (object.response !== undefined && object.response !== null)
            ? exports.GetLightLockState_Response.fromPartial(object.response)
            : undefined;
        message.error = object.error ?? undefined;
        return message;
    },
};
function createBaseGetLightLockState_Response() {
    return { state: 0 };
}
exports.GetLightLockState_Response = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.state !== 0) {
            writer.uint32(8).int32(message.state);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightLockState_Response();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { state: isSet(object.state) ? (0, lsx_common_1.lockStateFromJSON)(object.state) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.state !== 0) {
            obj.state = (0, lsx_common_1.lockStateToJSON)(message.state);
        }
        return obj;
    },
    create(base) {
        return exports.GetLightLockState_Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightLockState_Response();
        message.state = object.state ?? 0;
        return message;
    },
};
function createBaseGetLightLockState_Request() {
    return { id: 0 };
}
exports.GetLightLockState_Request = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightLockState_Request();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? lightIdFromJSON(object.id) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = lightIdToJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.GetLightLockState_Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightLockState_Request();
        message.id = object.id ?? 0;
        return message;
    },
};
function createBaseSetLightLockState() {
    return { request: undefined, response: undefined, error: undefined };
}
exports.SetLightLockState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.request !== undefined) {
            exports.SetLightLockState_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
        }
        if (message.response !== undefined) {
            exports.SetLightLockState_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
        }
        if (message.error !== undefined) {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightLockState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.request = exports.SetLightLockState_Request.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = exports.SetLightLockState_Response.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            request: isSet(object.request) ? exports.SetLightLockState_Request.fromJSON(object.request) : undefined,
            response: isSet(object.response) ? exports.SetLightLockState_Response.fromJSON(object.response) : undefined,
            error: isSet(object.error) ? globalThis.String(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.request !== undefined) {
            obj.request = exports.SetLightLockState_Request.toJSON(message.request);
        }
        if (message.response !== undefined) {
            obj.response = exports.SetLightLockState_Response.toJSON(message.response);
        }
        if (message.error !== undefined) {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.SetLightLockState.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetLightLockState();
        message.request = (object.request !== undefined && object.request !== null)
            ? exports.SetLightLockState_Request.fromPartial(object.request)
            : undefined;
        message.response = (object.response !== undefined && object.response !== null)
            ? exports.SetLightLockState_Response.fromPartial(object.response)
            : undefined;
        message.error = object.error ?? undefined;
        return message;
    },
};
function createBaseSetLightLockState_Request() {
    return { id: 0, state: 0 };
}
exports.SetLightLockState_Request = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.state !== 0) {
            writer.uint32(16).int32(message.state);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightLockState_Request();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.state = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? lightIdFromJSON(object.id) : 0,
            state: isSet(object.state) ? (0, lsx_common_1.lockStateFromJSON)(object.state) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = lightIdToJSON(message.id);
        }
        if (message.state !== 0) {
            obj.state = (0, lsx_common_1.lockStateToJSON)(message.state);
        }
        return obj;
    },
    create(base) {
        return exports.SetLightLockState_Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetLightLockState_Request();
        message.id = object.id ?? 0;
        message.state = object.state ?? 0;
        return message;
    },
};
function createBaseSetLightLockState_Response() {
    return {};
}
exports.SetLightLockState_Response = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightLockState_Response();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.SetLightLockState_Response.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseSetLightLockState_Response();
        return message;
    },
};
function createBaseGetLightMode() {
    return { request: undefined, response: undefined, error: undefined };
}
exports.GetLightMode = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.request !== undefined) {
            exports.GetLightMode_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
        }
        if (message.response !== undefined) {
            exports.GetLightMode_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
        }
        if (message.error !== undefined) {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightMode();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.request = exports.GetLightMode_Request.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = exports.GetLightMode_Response.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            request: isSet(object.request) ? exports.GetLightMode_Request.fromJSON(object.request) : undefined,
            response: isSet(object.response) ? exports.GetLightMode_Response.fromJSON(object.response) : undefined,
            error: isSet(object.error) ? globalThis.String(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.request !== undefined) {
            obj.request = exports.GetLightMode_Request.toJSON(message.request);
        }
        if (message.response !== undefined) {
            obj.response = exports.GetLightMode_Response.toJSON(message.response);
        }
        if (message.error !== undefined) {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.GetLightMode.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightMode();
        message.request = (object.request !== undefined && object.request !== null)
            ? exports.GetLightMode_Request.fromPartial(object.request)
            : undefined;
        message.response = (object.response !== undefined && object.response !== null)
            ? exports.GetLightMode_Response.fromPartial(object.response)
            : undefined;
        message.error = object.error ?? undefined;
        return message;
    },
};
function createBaseGetLightMode_Response() {
    return { mode: 0 };
}
exports.GetLightMode_Response = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.mode !== 0) {
            writer.uint32(8).int32(message.mode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightMode_Response();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.mode = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { mode: isSet(object.mode) ? lightModeFromJSON(object.mode) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.mode !== 0) {
            obj.mode = lightModeToJSON(message.mode);
        }
        return obj;
    },
    create(base) {
        return exports.GetLightMode_Response.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightMode_Response();
        message.mode = object.mode ?? 0;
        return message;
    },
};
function createBaseGetLightMode_Request() {
    return { id: 0 };
}
exports.GetLightMode_Request = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetLightMode_Request();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { id: isSet(object.id) ? lightIdFromJSON(object.id) : 0 };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = lightIdToJSON(message.id);
        }
        return obj;
    },
    create(base) {
        return exports.GetLightMode_Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGetLightMode_Request();
        message.id = object.id ?? 0;
        return message;
    },
};
function createBaseSetLightMode() {
    return { request: undefined, response: undefined, error: undefined };
}
exports.SetLightMode = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.request !== undefined) {
            exports.SetLightMode_Request.encode(message.request, writer.uint32(10).fork()).ldelim();
        }
        if (message.response !== undefined) {
            exports.SetLightMode_Response.encode(message.response, writer.uint32(18).fork()).ldelim();
        }
        if (message.error !== undefined) {
            writer.uint32(26).string(message.error);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightMode();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.request = exports.SetLightMode_Request.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.response = exports.SetLightMode_Response.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.error = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            request: isSet(object.request) ? exports.SetLightMode_Request.fromJSON(object.request) : undefined,
            response: isSet(object.response) ? exports.SetLightMode_Response.fromJSON(object.response) : undefined,
            error: isSet(object.error) ? globalThis.String(object.error) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.request !== undefined) {
            obj.request = exports.SetLightMode_Request.toJSON(message.request);
        }
        if (message.response !== undefined) {
            obj.response = exports.SetLightMode_Response.toJSON(message.response);
        }
        if (message.error !== undefined) {
            obj.error = message.error;
        }
        return obj;
    },
    create(base) {
        return exports.SetLightMode.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetLightMode();
        message.request = (object.request !== undefined && object.request !== null)
            ? exports.SetLightMode_Request.fromPartial(object.request)
            : undefined;
        message.response = (object.response !== undefined && object.response !== null)
            ? exports.SetLightMode_Response.fromPartial(object.response)
            : undefined;
        message.error = object.error ?? undefined;
        return message;
    },
};
function createBaseSetLightMode_Request() {
    return { id: 0, mode: 0 };
}
exports.SetLightMode_Request = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).int32(message.id);
        }
        if (message.mode !== 0) {
            writer.uint32(16).int32(message.mode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightMode_Request();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.mode = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? lightIdFromJSON(object.id) : 0,
            mode: isSet(object.mode) ? lightModeFromJSON(object.mode) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== 0) {
            obj.id = lightIdToJSON(message.id);
        }
        if (message.mode !== 0) {
            obj.mode = lightModeToJSON(message.mode);
        }
        return obj;
    },
    create(base) {
        return exports.SetLightMode_Request.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSetLightMode_Request();
        message.id = object.id ?? 0;
        message.mode = object.mode ?? 0;
        return message;
    },
};
function createBaseSetLightMode_Response() {
    return {};
}
exports.SetLightMode_Response = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetLightMode_Response();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.SetLightMode_Response.fromPartial(base ?? {});
    },
    fromPartial(_) {
        const message = createBaseSetLightMode_Response();
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
